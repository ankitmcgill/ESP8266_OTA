# Makefile for ESP8266 projects
#
# Thanks to:
# - zarya
# - Jeroen Domburg (Sprite_tm)
# - Christian Klippel (mamalala)
# - Tommie Gannert (tommie)
#
# Changelog:
# - 2014-10-06: Changed the variables to include the header file directory
# - 2014-10-06: Added global var for the Xtensa tool root
# - 2014-11-23: Updated for SDK 0.9.3
# - 2014-12-25: Replaced esptool by esptool.py


# - 2017-06-28: Makefile modified By Ankit To Suit My Needs
# ankit.bhatnagarindia@gmail.com

# Make the debug output verbos
# VERBOSE = 1

##################################
# PROJECT SPECIFIC OPTIONS
##################################
# Use this area to do custom defines used in my code using #ifdef
PROJECT_DEFINES = ESP8266

##################################
# Output directors to store intermediate compiled files
# relative to the project directory
##################################
BUILD_BASE	= build
FW_BASE		= firmware

##################################
# base directory for the compiler
XTENSA_TOOLS_ROOT ?= $(HOME)/Espressif/esp-open-sdk/xtensa-lx106-elf/bin
##################################

# # base directory of the ESP8266 SDK package, absolute
SDK_BASE	?= $(HOME)/Espressif/esp-open-sdk/sdk

##################################
# FIRMWARE BINARY NAME OPTIONS
##################################
# we create two different files for uploading into the flash
# these are the names and options to generate them
FW_FILE_1_ADDR	= 0x00000
FW_FILE_2_ADDR	= 0x10000
FW_FILE_1_NAME := eagle_flash_$(FW_FILE_1_ADDR)
FW_FILE_2_NAME := eagle_irom0text_$(FW_FILE_2_ADDR)

##################################
# ESPTOOL.PY OPTIONS
##################################
ESPTOOL		?= $(HOME)/Espressif/esp-open-sdk/esptool/esptool.py
ESPPORT		?= /dev/ttyUSB0
BAUDRATE	?= 115200
FLASHSIZE 	?= 32m-c1
FLASHFREQ 	?= 40m
FLASHMODE 	?= qio

# name for the target project
TARGET		= app

# which modules (subdirectories) of the project to include in compiling
MODULES		= user user/driver user/libs/
MODULES		:= $(MODULES) user/libs/ESP8266_MDNS
MODULES		:= $(MODULES) user/libs/ESP8266_GPIO
MODULES   	:= $(MODULES) user/libs/ESP8266_SMARTCONFIG
MODULES		:= $(MODULES) user/libs/ESP8266_SYSINFO
MODULES		:= $(MODULES) user/libs/ESP8266_TCP_SERVER
MODULES		:= $(MODULES) user/libs/ESP8266_SSID_FRAMEWORK
MODULES		:= $(MODULES) user/libs/ESP8266_FLASH
#MODULES		:= $(MODULES) user/libs/ESP8266_SNTP
#MODULES		:= $(MODULES) user/libs/ESP8266_I2C
#MODULES		:= $(MODULES) user/libs/RTC_DS1307
#MODULES		:= $(MODULES) user/libs/ESP8266_TCP_POST
#MODULES		:= $(MODULES) user/libs/EEPROM_AT24CXX

EXTRA_INCDIR = include ../extra/include

# libraries used in this project, mainly provided by the SDK
LIBS		= c gcc hal pp phy net80211 lwip wpa crypto main smartconfig ssl

# compiler flags using during compilation of source files
CFLAGS = -Os -g -O2 -std=gnu90 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals -mno-serialize-volatile -D__ets__ -DICACHE_FLASH
CFLAGS := $(CFLAGS) -D$(PROJECT_DEFINES)

# linker flags used to generate the main object file
LDFLAGS		= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static

# linker script used for the above linkier step
LD_SCRIPT	= eagle.app.v6.ld

# various paths from the SDK used in this project
SDK_LIBDIR	= lib
SDK_LDDIR	= ld
SDK_INCDIR	= include include/json


# select which tools to use as compiler, librarian and linker
CC		:= xtensa-lx106-elf-gcc
AR		:= xtensa-lx106-elf-ar
LD		:= xtensa-lx106-elf-gcc


####################################################################
#### no user configurable options below here
####################################################################
SRC_DIR		:= $(MODULES)
BUILD_DIR	:= $(addprefix $(BUILD_BASE)/,$(MODULES))

SDK_LIBDIR	:= $(addprefix $(SDK_BASE)/,$(SDK_LIBDIR))
SDK_INCDIR	:= $(addprefix -I$(SDK_BASE)/,$(SDK_INCDIR))

SRC		    := $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.c))
OBJ		    := $(patsubst %.c,$(BUILD_BASE)/%.o,$(SRC))
LIBS		:= $(addprefix -l,$(LIBS))
APP_AR		:= $(addprefix $(BUILD_BASE)/,$(TARGET)_app.a)
TARGET_OUT	:= $(addprefix $(BUILD_BASE)/,$(TARGET).out)

LD_SCRIPT	:= $(addprefix -T$(SDK_BASE)/$(SDK_LDDIR)/,$(LD_SCRIPT))

INCDIR	        := $(addprefix -I,$(SRC_DIR))
EXTRA_INCDIR	:= $(addprefix -I,$(EXTRA_INCDIR))
MODULE_INCDIR	:= $(addsuffix /include,$(INCDIR))

FW_FILE_1	:= $(addprefix $(FW_BASE)/,$(FW_FILE_1_ADDR).bin)
FW_FILE_2	:= $(addprefix $(FW_BASE)/,$(FW_FILE_2_ADDR).bin)

V ?= $(VERBOSE)
ifeq ("$(V)","1")
Q :=
vecho := @true
else
Q := @
vecho := @echo
endif

vpath %.c $(SRC_DIR)

define compile-objects
$1/%.o: %.c
	$(vecho) "CC $$<"
	$(Q) $(CC) $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) $(CFLAGS) -c $$< -o $$@
endef

.PHONY: all checkdirs flash_erase flash_init_data flash clean help

all: checkdirs $(TARGET_OUT) $(FW_FILE_1) $(FW_FILE_2) rename_fw_files

rename_fw_files: $(FW_FILE_1) $(FW_FILE_2)
	# rename the firmware files
	mv $(FW_FILE_1) $(FW_BASE)/$(FW_FILE_1_NAME)
	mv $(FW_FILE_2) $(FW_BASE)/$(FW_FILE_2_NAME)

$(FW_BASE)/%.bin: $(TARGET_OUT) | $(FW_BASE)
	$(vecho) "FW $(FW_BASE)/"
	$(Q) $(ESPTOOL) elf2image -o $(FW_BASE)/ $(TARGET_OUT)

$(TARGET_OUT): $(APP_AR)
	$(vecho) "LD $@"
	$(Q) $(LD) -L$(SDK_LIBDIR) $(LD_SCRIPT) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@

$(APP_AR): $(OBJ)
	$(vecho) "AR $@"
	$(Q) $(AR) cru $@ $^

checkdirs: $(BUILD_DIR) $(FW_BASE)

$(BUILD_DIR):
	$(Q) mkdir -p $@

$(FW_BASE):
	$(Q) mkdir -p $@

flash_erase:
	#erase flash (including stored wifi credentials)
	$(ESPTOOL) --port $(ESPPORT) --baud $(BAUDRATE) erase_flash

flash_init_data:
	#burn the esp8266 init rf data. required after flash erase !!
	$(ESPTOOL) --port $(ESPPORT) --baud $(BAUDRATE) write_flash --flash_mode $(FLASHMODE) --flash_size $(FLASHSIZE) --flash_freq $(FLASHFREQ) 0x3FC000 $(SDK_BASE)/bin/esp_init_data_default.bin

flash: $(FW_FILE_1) $(FW_FILE_2)
	$(ESPTOOL) --port $(ESPPORT) --baud $(BAUDRATE) write_flash --flash_mode $(FLASHMODE) --flash_size $(FLASHSIZE) --flash_freq $(FLASHFREQ) $(FW_FILE_1_ADDR) $(FW_FILE_1) $(FW_FILE_2_ADDR) $(FW_FILE_2) 0x3FE000 $(SDK_BASE)/bin/blank.bin

clean:
	$(Q) rm -rf $(FW_BASE) $(BUILD_BASE)

$(foreach bdir,$(BUILD_DIR),$(eval $(call compile-objects,$(bdir))))

help:
	@echo "*** ESP8266 MAKEFILE HELP"
	@echo ""
	@echo "*** Ankit Bhatnagar"
	@echo "*** June 27 2017"
	@echo "*** ankit.bhatnagarindia@gmail.com"
	@echo ""
	@echo "Following targets available:"
	@echo "CLEAN"
	@echo "ALL"
	@echo "FLASH_ERASE - erase completely (including stored wifi credentials)"
	@echo "FLASH_INIT_DATA - protgram init rf data. required after FLASH_ERASE !"
	@echo "FLASH - flash user program + blank.bin"
